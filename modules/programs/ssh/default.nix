{ config, lib, pkgs, ... }:

with lib;

let
  cfg = config.programs.ssh;

  knownHosts = map (h: getAttr h cfg.knownHosts) (attrNames cfg.knownHosts);

  knownHostsFiles = [ "/etc/ssh/ssh_known_hosts" "/etc/ssh/ssh_known_hosts2" ]
    ++ map pkgs.copyPathToStore cfg.knownHostsFiles;
in
{
  options = {
    programs.ssh.knownHostsFiles = mkOption {
      default = [];
      type = with types; listOf path;
      description = ''
        Files containing SSH host keys to set as global known hosts.
        <literal>/etc/ssh/ssh_known_hosts</literal> (which is
        generated by <option>programs.ssh.knownHosts</option>) and
        <literal>/etc/ssh/ssh_known_hosts2</literal> are always
        included.
      '';
      example = literalExpression ''
        [
          ./known_hosts
          (writeText "github.keys" '''
            github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
            github.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg=
            github.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl
          ''')
        ]
      '';
    };

    programs.ssh.knownHosts = mkOption {
      default = { };
      type = types.attrsOf (types.submodule ({ name, config, options, ... }: {
        options = {
          hostNames = mkOption {
            type = types.listOf types.str;
            default = [ name ] ++ config.extraHostNames;
            defaultText = literalExpression "[ ${name} ] ++ config.${options.extraHostNames}";
            description = ''
              A list of host names and/or IP numbers used for accessing
              the host's ssh service. This list includes the name of the
              containing `knownHosts` attribute by default
              for convenience. If you wish to configure multiple host keys
              for the same host use multiple `knownHosts`
              entries with different attribute names and the same
              `hostNames` list.
            '';
          };
          extraHostNames = mkOption {
            type = types.listOf types.str;
            default = [ ];
            description = ''
              A list of additional host names and/or IP numbers used for
              accessing the host's ssh service. This list is ignored if
              `hostNames` is set explicitly.
            '';
          };
          publicKey = mkOption {
            default = null;
            type = types.nullOr types.str;
            example = "ecdsa-sha2-nistp521 AAAAE2VjZHN...UEPg==";
            description = ''
              The public key data for the host. You can fetch a public key
              from a running SSH server with the {command}`ssh-keyscan`
              command. The public key should not include any host names, only
              the key type and the key itself.
            '';
          };
          publicKeyFile = mkOption {
            default = null;
            type = types.nullOr types.path;
            description = ''
              The path to the public key file for the host. The public
              key file is read at build time and saved in the Nix store.
              You can fetch a public key file from a running SSH server
              with the {command}`ssh-keyscan` command. The content
              of the file should follow the same format as described for
              the `publicKey` option. Only a single key
              is supported. If a host has multiple keys, use
              {option}`programs.ssh.knownHostsFiles` instead.
            '';
          };
        };
      }));
      description = ''
        The set of system-wide known SSH hosts. To make simple setups more
        convenient the name of an attribute in this set is used as a host name
        for the entry. This behaviour can be disabled by setting
        `hostNames` explicitly. You can use
        `extraHostNames` to add additional host names without
        disabling this default.
      '';
      example = ''
        {
          myhost = {
            extraHostNames = [ "myhost.mydomain.com" "10.10.1.4" ];
            publicKeyFile = ./pubkeys/myhost_ssh_host_dsa_key.pub;
          };
          "myhost2.net".publicKey = "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAILIRuJ8p1Fi+m6WkHV0KWnRfpM1WxoW8XAS+XvsSKsTK";
          "myhost2.net/dsa" = {
            hostNames = [ "myhost2.net" ];
            publicKeyFile = ./pubkeys/myhost2_ssh_host_dsa_key.pub;
          };
        }
      '';
    };
  };

  config = {

    assertions = flip mapAttrsToList cfg.knownHosts (name: data: {
      assertion = (data.publicKey == null && data.publicKeyFile != null) ||
        (data.publicKey != null && data.publicKeyFile == null);
      message = "knownHost ${name} must contain either a publicKey or publicKeyFile";
    });

    environment.etc."ssh/ssh_config.d/200-nixos".text = ''
      GlobalKnownHostsFile ${concatStringsSep " " knownHostsFiles}
    '';

    environment.etc."ssh/ssh_known_hosts".text = (flip (concatMapStringsSep "\n") knownHosts
      (h: assert h.hostNames != [ ];
      concatStringsSep "," h.hostNames + " "
        + (if h.publicKey != null then h.publicKey else readFile h.publicKeyFile)
      )) + "\n";

  };
}
